import java.io.*;
import java.util.*;

/**
 * 풀이 과정:
 * 1. dp를 이용해서 해결하는 문제다. 3차원 배열로 선언할 수 있다.
 * 2. dp[날짜][지각 수][연속한 결석 수]를 값으로 하는 dp배열을 하나 선언한다
 * 3. 그다음 개근상을 받을 수 있는 경우를 생각해보자
 * 4. 0번 지각 + 0번 연속 결석 -> dp[i][0][0] / 0번 지각 + 1번 연속 결석 -> dp[i][0][1] / 0번 지각 + 2번 연속 결석 -> dp[i][0][2] 
 * 5. 1번 지각 + 0번 연속 결석 -> dp[i][1][0] / 1번 지각 + 1번 연속 결석 -> dp[i][1][1] / 1번 지각 + 2번 연속 결석 -> dp[i][1][2]
 * 6. 위와같이 6가지 경우에 해당한다
 * 7. 첫날은 지각, 연속결석 모두 없는 경우와 지각 연속결석이 한번씩 있는 경우 모두 개근상이 가능하다
 * 8. 둘째 날부터 계산한다. 주의할점은 출석하거나 지각하면 결석이 초기화된다는 점이다
 * 9. i번째 날에 출석했을 경우 0번 지각 0번 연속 결석은 전날에 출석하거나 결석을 1번, 2번 한 경우다
 * 10. i번째 날에 0번 지각 1번 연속결석은 이전에 0번 지각 0번 연속 결석한 경우다
 * 11. i번째 날에 0번 지각 2번 연속결석은 이전에 0번 지각 1번 연속결석한 경우다
 * 12. i번째 날에 1번 지각 0번 연속결석은 경우의 수가 좀 많다. 이전날에 (0,0) (0,1) (0,2) (1,0) (1,1) (1,2)인 경우다
 * 13. i번째 날에 1번 지각 1번 연속결석한 경우는 1번 지각 0번 연속결석한 경우다
 * 14. i번째 날에 1번 지각 2번 연속결석한 경우는 1번 지각 1번 연속결석한 경우다
 * 15. 이 모든 경우에 mod를 모듈러 연산해주자
 * 16. 이어서 n번째 날에 6가지 경우의 합을 구한 뒤, mod로 모듈러 연산을 진행하고 출력하면 정답이 된다.
 *
 * 해결방법:
 *
 * 시간복잡도: O(n)
 * 공간복잡도: O(1)
 *
 */

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int n = Integer.parseInt(br.readLine());
        int mod = 1_000_000;
        int[][][] dp = new int[1001][2][3];
        dp[1][0][0] = 1;
        dp[1][1][0] = 1;
        dp[1][0][1] = 1;
        for (int i = 2; i < n + 1; i++) {
            dp[i][0][0] = (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]) % mod;
            dp[i][0][1] = (dp[i-1][0][0]) % mod;
            dp[i][0][2] = (dp[i-1][0][1]) % mod;
            dp[i][1][0] = (dp[i-1][0][0] + dp[i-1][0][1] + dp[i-1][0][2] + dp[i-1][1][0] + dp[i-1][1][1] + dp[i-1][1][2]) % mod;
            dp[i][1][1] = (dp[i-1][1][0]) % mod;
            dp[i][1][2] = (dp[i-1][1][1]) % mod;
        }

        int sum = (dp[n][0][0] + dp[n][0][1] + dp[n][0][2] + dp[n][1][0] + dp[n][1][1] + dp[n][1][2]) % mod;

        bw.write(sum+"");

        br.close();
        bw.close();
    }
}

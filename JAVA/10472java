import java.io.*;
import java.util.Arrays;

/**
 * 풀이 과정:
 * 1. dfs로 풀 수 있는 문제다. 배열의 값을 뒤집어야 하므로 boolean타입으로 선언했따
 * 2. depth를 선언하면 2차원 배열에서 편하게 탐색할 수 있다
 * 3. 현재 지점을 뒤집을지 말지를 선택해서 진행하면 된다
 * 4. 뒤집을 대는 전체 배열에 영향을 주지 않도록 복사한 배열에 변화를 주고 그 배열을 재귀로 던져준다
 * 5. base condition에 도달했을 떄의 값을 검증해서 최솟값으로 갱신한다
 * 6. 완성한 ans를 출력하면 정답이 된다.
 *
 * 해결방법:
 *
 * 시간복잡도: O(2^9*3*3)
 * 공간복잡도: O(3*3)
 *
 */
public class Main {

    static int ans = Integer.MAX_VALUE;
    static int[] dy = {0, 0,0,-1,1};
    static int[] dx = {0, -1,1,0,0};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int P = Integer.parseInt(br.readLine());
        for (int i = 0; i < P; i++) {
            ans = Integer.MAX_VALUE;
            boolean[][] arr = new boolean[3][3];
            for (int j = 0; j < 3; j++) {
                String s = br.readLine();
                for (int k = 0; k < 3; k++) {
                    if(s.charAt(k) == '*') {
                        arr[j][k] = true;
                    }
                }
            }

            backtracking(0, arr, 0);

            bw.write(ans+"\n");
        }



        br.close();
        bw.close();
    }

    private static void backtracking(int depth, boolean[][] arr, int count) {
        if(depth == 9){
            if(!valid(arr, true)){
                ans = Math.min(ans, count);
            }
            return;
        }

        int y = depth / 3;
        int x = depth % 3;
        backtracking(depth+1, arr, count);
        backtracking(depth+1, reverse(arr, y, x), count+1);
    }

    private static boolean valid(boolean[][] arr, boolean isTrue) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if(arr[i][j] == isTrue){
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean[][] reverse(boolean[][] arr, int y, int x) {
        boolean[][] tmp = new boolean[3][3];
        for (int i = 0; i < 3; i++) {
            tmp[i] = Arrays.copyOf(arr[i], 3);
        }
        for (int k = 0; k < 5; k++) {
            int ny = y + dy[k];
            int nx = x + dx[k];
            if(isRange(ny,nx)){
                tmp[ny][nx] = !tmp[ny][nx];
            }
        }
        return tmp;
    }

    private static boolean isRange(int ny, int nx) {
        return ny >= 0 && ny < 3 && nx >= 0 && nx < 3;
    }
}
